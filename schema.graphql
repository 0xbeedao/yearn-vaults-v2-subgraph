enum VaultStatus {
  Added
  Released
  Experimental
}

# interface for user and vault balances
interface BalanceUpdate {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!

  "Deposit (want) token balance"
  balance: BigInt!
  "Total (want) token deposits"
  deposits: BigInt!
  "Total (want) token withdrawals"
  withdrawals: BigInt!

  "Share token (ytoken) balance"
  shareBalance: BigInt!
  "Total share tokens (ytoken) minted"
  sharesMinted: BigInt!
  "Total share tokens (ytoken) burnt"
  sharesBurnt: BigInt!
}

type VaultUpdate implements BalanceUpdate @entity {
  "Vault-Transaction-Log"
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!

  "Deposit (want) token balance"
  balance: BigInt!
  "Total (want) token deposits"
  deposits: BigInt!
  "Total (want) token withdrawals"
  withdrawals: BigInt!

  "Share token (ytoken) balance - totalSupply()"
  shareBalance: BigInt!
  "Total share tokens (ytoken) minted"
  sharesMinted: BigInt!
  "Total share tokens (ytoken) burnt"
  sharesBurnt: BigInt!

  vault: Vault!

  "Share token (ytoken) price denominated to (want) token"
  pricePerFullShare: BigInt!
  # TODO: (?) denominated to
  "Total (withdrawal + performance) fees"
  earnings: BigInt!
  # TODO: (?) denominated to
  "Total withdrawal fees"
  withdrawalFees: BigInt!
  # TODO: (?) denominated to
  "Total performance fees"
  performanceFees: BigInt!
}

type AccountUpdate implements BalanceUpdate @entity {
  "Account-Transaction-Log"
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!

  "Deposit (want) token balance"
  balance: BigInt!
  "Total (want) token deposits"
  deposits: BigInt!
  "Total (want) token withdrawals"
  withdrawals: BigInt!

  "Share token (ytoken) balance"
  shareBalance: BigInt!
  "Total share tokens (ytoken) minted"
  sharesMinted: BigInt!
  "Total share tokens (ytoken) burnt"
  sharesBurnt: BigInt!

  account: Account!

  "Total (want) tokens sent"
  sent: BigInt!
  "Total (want) tokens received"
  received: BigInt!

  "Total share tokens (ytoken) sent"
  sharesSent: BigInt!
  "Total share tokens (ytoken) received"
  sharesReceived: BigInt!
}

type Account @entity {
  "Account address"
  id: ID!

  # FIXME: Uncomment
  # "Vault deposits"
  # deposits: [Deposit!]! @derivedFrom(field: "account")
  # FIXME: Uncomment
  # "Vault withdrawals"
  # withdrawals: [Withdrawal!]! @derivedFrom(field: "account")
  # FIXME: Uncomment
  # vaultBalances: [AccountVaultBalance!]! @derivedFrom(field: "account")

  # FIXME: Uncomment
  # "Incoming transfers"
  # received: [Transfer!]! @derivedFrom(field: "to")
  # FIXME: Uncomment
  # "Outgoing transfers"
  # sent: [Transfer!]! @derivedFrom(field: "from")
}

type AccountVaultBalance @entity {
  "Account-Vault"
  id: ID!
  vault: Vault!
  account: Account!
  "Deposit (want) token info"
  token: Token!
  "Share token (ytoken) info"
  shareToken: Token!

  "Account stats"
  accountUpdates: [AccountUpdate!]!
}

type Transfer @entity {
  "Transaction-Log"
  id: ID!
  "Sender"
  from: Account!
  "Receiver"
  to: Account!
  "Share token (ytoken) amount"
  shares: BigInt!
  "Share token (ytoken) amount denominated to (want) token"
  amount: BigInt!

  token: Token!
  timestamp: BigInt!
  blockNumber: BigInt!
}

enum OperationType {
  Withdrawal
  Deposit
}

type Operation @entity {
  "Transaction-Log"
  id: ID!
  vault: Vault!
  account: Account!
  "Deposit/Withdrawal (want) token amount"
  amount: BigInt!
  "Share token (ytoken) amount"
  shares: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  "Deposit or Withdrawal"
  type: OperationType!

  # (!) VaultUpdate is created on Deposit
  # vaultStats: VaultUpdate!
}

type EthTransaction @entity {
  id: ID!
  event: String!
  from: Bytes!
  gasPrice: BigInt!
  gasSent: BigInt!
  hash: Bytes!
  index: BigInt!
  to: Bytes!
  value: BigInt!
  contract: Bytes!
  timestamp: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

type Token @entity {
  "Token address"
  id: ID!
  address: Bytes!
  decimals: Int!
  name: String!
  symbol: String!
}

type Vault @entity {
  "The Vault ID."
  id: ID!
  "The ETH transaction when the event was emitted."
  transaction: EthTransaction!
  "Indicates the current vault status."
  status: VaultStatus!
  "The share token (yToken) information"
  shareToken: Token!
  "The deposit want token information."
  token: Token!
  "The API version."
  apiVersion: String!
  "The deployment ID."
  deploymentId: BigInt!
  "Blocknumber the vault information was most recently updated."
  blockNumber: BigInt!
  "Timestamp the vault information was most recently updated."
  timestamp: BigInt!
  "Creation timestamp"
  activation: BigInt!
  "The strategies associated to this vault."
  strategies: [Strategy!]!

  "Vault stats"
  vaultUpdates: [VaultUpdate]!
}

enum StrategyStatus {
  Active
  Retired
}

type Strategy @entity {
  "The Strategy ID."
  id: ID!
  "The ETH transaction when the event was emitted."
  transaction: EthTransaction!
  "The Strategy address."
  address: Bytes!
  "The Vault"
  vault: Vault!
  "Defines the maximum borrow amount."
  debtLimit: BigInt!
  "It is the current rate limit. It increases/decreases per block."
  rateLimit: BigInt!
  "Defines the strategist's fee (basis points)."
  performanceFee: BigInt!
  "Blocknumber the vault information was most recently updated."
  blockNumber: BigInt!
  "Timestamp the vault information was most recently updated."
  timestamp: BigInt!

  "The reports created by this strategy."
  reports: [StrategyReport!]!

  "harvest() calls"
  harvests: [Harvest!]! #@derivedFrom(field: "strategy") is this needed?
}

type StrategyReport @entity {
  "The Strategy Report ID."
  id: ID!
  "The ETH transaction when the event was emitted."
  transaction: EthTransaction!
  "The Strategy reference."
  strategy: Strategy! @relation
  "The reported gain amount for the strategy."
  gain: BigInt!
  "The reported loss amount for the strategy."
  loss: BigInt!
  "The reported total gain amount for the strategy."
  totalGain: BigInt!
  "The reported total loss amount for the strategy."
  totalLoss: BigInt!
  "The reported total debt amount for the strategy."
  totalDebt: BigInt!
  "The reported debt added amount for the strategy."
  debtAdded: BigInt!
  "The reported debt limit amount for the strategy."
  debtLimit: BigInt!
  "Blocknumber the strategy report was most recently updated."
  blockNumber: BigInt!
  "Timestamp the strategy report was most recently updated."
  timestamp: BigInt!

  "Vault stats"
  vaultUpdate: VaultUpdate!
  # "Strategy stats"
  # TODO: is this needed?
  # strategyUpdate: StrategyUpdate!
}

type Harvest @entity {
  "Strategy-Transaction-Log"
  id: ID!
  vault: Vault!
  strategy: Strategy!
  "Function caller"
  harvester: Bytes!

  "The reported gain amount for the strategy at the time of the harvest."
  gain: BigInt!
  "The reported loss amount for the strategy at the time of the harvest."
  loss: BigInt!
  "The reported debt paid from strategy at the time of the harvest."
  debtPayment: BigInt!
  "The reported outstanding debt from strategy at the time of the harvest."
  debtOutstanding: BigInt!

  timestamp: BigInt!
  blockNumber: BigInt!
}
