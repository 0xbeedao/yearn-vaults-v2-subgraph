# TODO document fields
type EthTransaction @entity {
  id: ID!
  event: String!
  from: Bytes!
  gasPrice: BigInt!
  gasSent: BigInt!
  hash: Bytes!
  index: BigInt!
  to: Bytes!
  value: BigInt!
  contract: Bytes!
  timestamp: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

type Token @entity {
  "Token address"
  id: ID!
  "Number of decimals for this Token"
  decimals: Int!
  "Name of the Token"
  name: String!
  "Symbol of the Token"
  symbol: String!
}

# TODO
# emergency shutdown
# withdrawal queue
type Vault @entity {
  "Vault address"
  id: ID!
  "Token this Vault will accrue"
  token: Token!
  "Token representing Shares in the Vault"
  shareToken: Token!
  "Latest Vault Update"
  latestUpdate: VaultUpdate!
  "All Vault Updates"
  historicalUpdates: [VaultUpdate!]! @derivedFrom(field: "vault")
  "Strategies for this Vault"
  strategies: [Strategy!]! @derivedFrom(field: "vault")
  "Token deposits into the Vault"
  deposits: [Deposit!]! @derivedFrom(field: "vault")
  "Token withdrawals from the Vault"
  withdrawals: [Withdrawal!]! @derivedFrom(field: "vault")
  "Transfers of Vault Shares"
  shareTransfers: [Transfer!]! @derivedFrom(field: "vault")
  "Creation timestamp"
  creationTimestamp: BigInt!
  "Creation block number"
  creationBlockNumber: BigInt!
  "Creation transaction"
  creationTransaction: EthTransaction!
}

type VaultUpdate @entity {
  "Vault-Transaction-Log"
  id: ID!
  "Timestamp of update"
  timestamp: BigInt!
  "Block number of update"
  blockNumber: BigInt!
  "The ETH transaction for this update"
  transaction: EthTransaction!
  "Vault this update is for"
  vault: Vault!

  ### BALANCES AND SHARES

  "Balance of Tokens in the Vault and its Strategies"
  tokensBalance: BigInt!
  "Current idle Token balance"
  tokensIdleBalance: BigInt! # Tokens in the Vault contract
  "Balance of Tokens invested into Strategies"
  tokensStrategyDebtTotal: BigInt!
  "Sum of all Deposits over time"
  tokensDeposited: BigInt!
  "Sum of all Withdrawals over time"
  tokensWithdrawn: BigInt!
  "Deposit limit for Tokens in the Vault"
  tokensDepositLimit: BigInt!
  "Current supply of Shares"
  sharesSupply: BigInt!
  "Sum of Shares minted over all time"
  sharesMinted: BigInt!
  "Sum of Shares burnt over all time"
  sharesBurnt: BigInt!
  
  ### PERFORMANCE

  "Current price per full share"
  pricePerShare: BigInt!
  #### TODO Awaiting updated Vault Yield-Oracles
  # "12-day EMA of Vault APY"
  # apy12dEMA: Int!
  # "50-day EMA of Vault APY"
  # apy50dEMA: Int!
  
  "Total returns generated in Tokens"
  # TODO inclusive vs exclusive of fees?
  # TODO nomenclature returns vs performance
  returnsTotal: BigInt!

  ### FEES

  "Total management fee revenue in Tokens"
  feesManagementTotal: BigInt!
  "Total performance fee revenue in Tokens"
  feesPerformanceTotal: BigInt!
  "Total Treasury component of Performance Fee"
  feesPerformanceTreasuryTotal: BigInt!
  "Total Strategist component of Performance Fee"
  feesPerformanceStrategistTotal: BigInt!

  "Management fee in basis points"
  feeManagementBps: Int!
  "Performance fee in basis points"
  feePerformanceBps: Int!
}

type Account @entity {
  "Account address"
  id: ID!
  "Vault deposits"
  deposits: [Deposit!]! @derivedFrom(field: "account")
  "Vault withdrawals"
  withdrawals: [Withdrawal!]! @derivedFrom(field: "account")
  "Vault positions"
  vaultPositions: [AccountVaultPosition!]! @derivedFrom(field: "account")

  "Incoming share transfers"
  sharesReceived: [Transfer!]! @derivedFrom(field: "to")
  "Outgoing share transfers"
  sharesSent: [Transfer!]! @derivedFrom(field: "from")
}

type Deposit @entity {
  "Transaction-Log"
  id: ID!
  "Account making Deposit"
  account: Account!
  "Vault deposited into"
  vault: Vault!
  "Number of Tokens deposited into Vault"
  tokenAmount: BigInt!
  "Number of new Vault Shares minted"
  sharesMinted: BigInt!
  "The ETH transaction for this Deposit"
  transaction: EthTransaction!

}

type Withdrawal @entity {
  "Transaction-Log"
  id: ID!
  "Account making Deposit"
  account: Account!
  "Vault withdrawn from"
  vault: Vault!
  "Number of Tokens withdrawn from Vault"
  tokenAmount: BigInt!
  "Number of Vault Shares burnt"
  sharesBurnt: BigInt!
  "The ETH transaction for this Withdrawal"
  transaction: EthTransaction!
}

type Transfer @entity {
  "Transaction-Log"
  id: ID!
  "Vault"
  vault: Vault!
  "Sender"
  from: Account!
  "Receiver"
  to: Account!
  "Vault Share Token"
  shareToken: Token!
  "Number of Vault Shares transferred"
  amount: BigInt!
  "Vault Token"
  token: Token!
  "Number of Tokens redeemable for shares transferred"
  tokenAmount: BigInt!
  "Timestamp of Transfer"
  timestamp: BigInt!
  "Block number of Transfer"
  blockNumber: BigInt!
  "The ETH transaction for this Transfer"
  transaction: EthTransaction!
}

type AccountVaultPosition @entity {
  "Account-Vault"
  id: ID!
  "Vault"
  vault: Vault!
  "Account"
  account: Account!
  "Vault token"
  token: Token!
  "Vault share token"
  shareToken: Token!
  "Latest account update for this Vault"
  latestUpdate: AccountVaultPositionUpdate!
  "Account updates over time"
  historicalUpdates: [AccountVaultPositionUpdate!]!
}

type AccountVaultPositionUpdate @entity {
  "Account-Transaction-Log"
  id: ID!
  "Timestamp"
  timestamp: BigInt!
  "Block number"
  blockNumber: BigInt!
  "The Account this update applies to"
  account: Account!

  "Share balance"
  shareBalance: BigInt!
  "Token balance"
  tokenBalance: BigInt!
    
  "Total token deposits"
  depositsTotal: BigInt!
  "Total token withdrawals"
  withdrawalsTotal: BigInt!

  "Total share tokens minted"
  sharesMinted: BigInt!
  "Total share tokens burnt"
  sharesBurnt: BigInt!

  "Total tokens sent"
  tokensSent: BigInt!
  "Total tokens received"
  tokensReceived: BigInt!

  "Total share tokens sent"
  sharesSent: BigInt!
  "Total share tokens received"
  sharesReceived: BigInt!

  "The ETH transaction for this update"
  transaction: EthTransaction!
}

enum StrategyStatus {
  Active
  Retired
}

type Strategy @entity {
  "The Strategy ID."
  id: ID!
  "The ETH transaction when the event was emitted."
  transaction: EthTransaction!
  "The Strategy address."
  address: Bytes!
  "The Vault"
  vault: Vault!
  "Defines the maximum borrow amount."
  debtLimit: BigInt!
  "It is the current rate limit. It increases/decreases per block."
  rateLimit: BigInt!
  "Defines the strategist's fee (basis points)."
  performanceFee: BigInt!
  "Blocknumber the vault information was most recently updated."
  blockNumber: BigInt!
  "Timestamp the vault information was most recently updated."
  timestamp: BigInt!

  "The reports created by this strategy."
  reports: [StrategyReport!]!

  "harvest() calls"
  harvests: [Harvest!]! @derivedFrom(field: "strategy")
}

type StrategyReport @entity {
  "The Strategy Report ID."
  id: ID!
  "The ETH transaction when the event was emitted."
  transaction: EthTransaction!
  "The Strategy reference."
  strategy: Strategy! @relation
  "The reported gain amount for the strategy."
  gain: BigInt!
  "The reported loss amount for the strategy."
  loss: BigInt!
  "The reported total gain amount for the strategy."
  totalGain: BigInt!
  "The reported total loss amount for the strategy."
  totalLoss: BigInt!
  "The reported total debt amount for the strategy."
  totalDebt: BigInt!
  "The reported debt added amount for the strategy."
  debtAdded: BigInt!
  "The reported debt limit amount for the strategy."
  debtLimit: BigInt!
  "Blocknumber the strategy report was most recently updated."
  blockNumber: BigInt!
  "Timestamp the strategy report was most recently updated."
  timestamp: BigInt!

  "Vault stats"
  vaultUpdate: VaultUpdate!
  # "Strategy stats"
  # TODO: is this needed?
  # strategyUpdate: StrategyUpdate!
}

type Harvest @entity {
  "Strategy-Transaction-Log"
  id: ID!
  vault: Vault!
  strategy: Strategy!
  "Function caller"
  harvester: Bytes!

  "The reported gain amount for the strategy at the time of the harvest."
  gain: BigInt!
  "The reported loss amount for the strategy at the time of the harvest."
  loss: BigInt!
  "The reported debt paid from strategy at the time of the harvest."
  debtPayment: BigInt!
  "The reported outstanding debt from strategy at the time of the harvest."
  debtOutstanding: BigInt!

  timestamp: BigInt!
  blockNumber: BigInt!
}
