// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewRelease extends ethereum.Event {
  get params(): NewRelease__Params {
    return new NewRelease__Params(this);
  }
}

export class NewRelease__Params {
  _event: NewRelease;

  constructor(event: NewRelease) {
    this._event = event;
  }

  get event_id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get template(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get api_version(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class NewVault extends ethereum.Event {
  get params(): NewVault__Params {
    return new NewVault__Params(this);
  }
}

export class NewVault__Params {
  _event: NewVault;

  constructor(event: NewVault) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get event_id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get vault(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get api_version(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class NewExperimentalVault extends ethereum.Event {
  get params(): NewExperimentalVault__Params {
    return new NewExperimentalVault__Params(this);
  }
}

export class NewExperimentalVault__Params {
  _event: NewExperimentalVault;

  constructor(event: NewExperimentalVault) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vault(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get api_version(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Registry extends ethereum.SmartContract {
  static bind(address: Address): Registry {
    return new Registry("Registry", address);
  }

  newVault(token: Address, guardian: Address): Address {
    let result = super.call("newVault", "newVault(address,address):(address)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromAddress(guardian)
    ]);

    return result[0].toAddress();
  }

  try_newVault(
    token: Address,
    guardian: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newVault",
      "newVault(address,address):(address)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(guardian)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newVault1(token: Address, guardian: Address, nameOverride: string): Address {
    let result = super.call(
      "newVault",
      "newVault(address,address,string):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(guardian),
        ethereum.Value.fromString(nameOverride)
      ]
    );

    return result[0].toAddress();
  }

  try_newVault1(
    token: Address,
    guardian: Address,
    nameOverride: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newVault",
      "newVault(address,address,string):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(guardian),
        ethereum.Value.fromString(nameOverride)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newVault2(
    token: Address,
    guardian: Address,
    nameOverride: string,
    symbolOverride: string
  ): Address {
    let result = super.call(
      "newVault",
      "newVault(address,address,string,string):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(guardian),
        ethereum.Value.fromString(nameOverride),
        ethereum.Value.fromString(symbolOverride)
      ]
    );

    return result[0].toAddress();
  }

  try_newVault2(
    token: Address,
    guardian: Address,
    nameOverride: string,
    symbolOverride: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newVault",
      "newVault(address,address,string,string):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(guardian),
        ethereum.Value.fromString(nameOverride),
        ethereum.Value.fromString(symbolOverride)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newExperimentalVault(token: Address): Address {
    let result = super.call(
      "newExperimentalVault",
      "newExperimentalVault(address):(address)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toAddress();
  }

  try_newExperimentalVault(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newExperimentalVault",
      "newExperimentalVault(address):(address)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newExperimentalVault1(token: Address, aGovernance: Address): Address {
    let result = super.call(
      "newExperimentalVault",
      "newExperimentalVault(address,address):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(aGovernance)
      ]
    );

    return result[0].toAddress();
  }

  try_newExperimentalVault1(
    token: Address,
    aGovernance: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newExperimentalVault",
      "newExperimentalVault(address,address):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(aGovernance)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newExperimentalVault2(
    token: Address,
    aGovernance: Address,
    guardian: Address
  ): Address {
    let result = super.call(
      "newExperimentalVault",
      "newExperimentalVault(address,address,address):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(aGovernance),
        ethereum.Value.fromAddress(guardian)
      ]
    );

    return result[0].toAddress();
  }

  try_newExperimentalVault2(
    token: Address,
    aGovernance: Address,
    guardian: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newExperimentalVault",
      "newExperimentalVault(address,address,address):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(aGovernance),
        ethereum.Value.fromAddress(guardian)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newExperimentalVault3(
    token: Address,
    aGovernance: Address,
    guardian: Address,
    nameOverride: string
  ): Address {
    let result = super.call(
      "newExperimentalVault",
      "newExperimentalVault(address,address,address,string):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(aGovernance),
        ethereum.Value.fromAddress(guardian),
        ethereum.Value.fromString(nameOverride)
      ]
    );

    return result[0].toAddress();
  }

  try_newExperimentalVault3(
    token: Address,
    aGovernance: Address,
    guardian: Address,
    nameOverride: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newExperimentalVault",
      "newExperimentalVault(address,address,address,string):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(aGovernance),
        ethereum.Value.fromAddress(guardian),
        ethereum.Value.fromString(nameOverride)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newExperimentalVault4(
    token: Address,
    aGovernance: Address,
    guardian: Address,
    nameOverride: string,
    symbolOverride: string
  ): Address {
    let result = super.call(
      "newExperimentalVault",
      "newExperimentalVault(address,address,address,string,string):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(aGovernance),
        ethereum.Value.fromAddress(guardian),
        ethereum.Value.fromString(nameOverride),
        ethereum.Value.fromString(symbolOverride)
      ]
    );

    return result[0].toAddress();
  }

  try_newExperimentalVault4(
    token: Address,
    aGovernance: Address,
    guardian: Address,
    nameOverride: string,
    symbolOverride: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newExperimentalVault",
      "newExperimentalVault(address,address,address,string,string):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(aGovernance),
        ethereum.Value.fromAddress(guardian),
        ethereum.Value.fromString(nameOverride),
        ethereum.Value.fromString(symbolOverride)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nextRelease(): BigInt {
    let result = super.call("nextRelease", "nextRelease():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextRelease(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextRelease", "nextRelease():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  releases(arg0: BigInt): Address {
    let result = super.call("releases", "releases(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);

    return result[0].toAddress();
  }

  try_releases(arg0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("releases", "releases(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nextDeployment(arg0: Address): BigInt {
    let result = super.call(
      "nextDeployment",
      "nextDeployment(address):(uint256)",
      [ethereum.Value.fromAddress(arg0)]
    );

    return result[0].toBigInt();
  }

  try_nextDeployment(arg0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextDeployment",
      "nextDeployment(address):(uint256)",
      [ethereum.Value.fromAddress(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaults(arg0: Address, arg1: BigInt): Address {
    let result = super.call("vaults", "vaults(address,uint256):(address)", [
      ethereum.Value.fromAddress(arg0),
      ethereum.Value.fromUnsignedBigInt(arg1)
    ]);

    return result[0].toAddress();
  }

  try_vaults(arg0: Address, arg1: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("vaults", "vaults(address,uint256):(address)", [
      ethereum.Value.fromAddress(arg0),
      ethereum.Value.fromUnsignedBigInt(arg1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SetGovernanceCall extends ethereum.Call {
  get inputs(): SetGovernanceCall__Inputs {
    return new SetGovernanceCall__Inputs(this);
  }

  get outputs(): SetGovernanceCall__Outputs {
    return new SetGovernanceCall__Outputs(this);
  }
}

export class SetGovernanceCall__Inputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }

  get _governance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovernanceCall__Outputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }
}

export class AcceptGovernanceCall extends ethereum.Call {
  get inputs(): AcceptGovernanceCall__Inputs {
    return new AcceptGovernanceCall__Inputs(this);
  }

  get outputs(): AcceptGovernanceCall__Outputs {
    return new AcceptGovernanceCall__Outputs(this);
  }
}

export class AcceptGovernanceCall__Inputs {
  _call: AcceptGovernanceCall;

  constructor(call: AcceptGovernanceCall) {
    this._call = call;
  }
}

export class AcceptGovernanceCall__Outputs {
  _call: AcceptGovernanceCall;

  constructor(call: AcceptGovernanceCall) {
    this._call = call;
  }
}

export class NewReleaseCall extends ethereum.Call {
  get inputs(): NewReleaseCall__Inputs {
    return new NewReleaseCall__Inputs(this);
  }

  get outputs(): NewReleaseCall__Outputs {
    return new NewReleaseCall__Outputs(this);
  }
}

export class NewReleaseCall__Inputs {
  _call: NewReleaseCall;

  constructor(call: NewReleaseCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class NewReleaseCall__Outputs {
  _call: NewReleaseCall;

  constructor(call: NewReleaseCall) {
    this._call = call;
  }
}

export class NewVaultCall extends ethereum.Call {
  get inputs(): NewVaultCall__Inputs {
    return new NewVaultCall__Inputs(this);
  }

  get outputs(): NewVaultCall__Outputs {
    return new NewVaultCall__Outputs(this);
  }
}

export class NewVaultCall__Inputs {
  _call: NewVaultCall;

  constructor(call: NewVaultCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get guardian(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class NewVaultCall__Outputs {
  _call: NewVaultCall;

  constructor(call: NewVaultCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class NewVault1Call extends ethereum.Call {
  get inputs(): NewVault1Call__Inputs {
    return new NewVault1Call__Inputs(this);
  }

  get outputs(): NewVault1Call__Outputs {
    return new NewVault1Call__Outputs(this);
  }
}

export class NewVault1Call__Inputs {
  _call: NewVault1Call;

  constructor(call: NewVault1Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get guardian(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get nameOverride(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class NewVault1Call__Outputs {
  _call: NewVault1Call;

  constructor(call: NewVault1Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class NewVault2Call extends ethereum.Call {
  get inputs(): NewVault2Call__Inputs {
    return new NewVault2Call__Inputs(this);
  }

  get outputs(): NewVault2Call__Outputs {
    return new NewVault2Call__Outputs(this);
  }
}

export class NewVault2Call__Inputs {
  _call: NewVault2Call;

  constructor(call: NewVault2Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get guardian(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get nameOverride(): string {
    return this._call.inputValues[2].value.toString();
  }

  get symbolOverride(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class NewVault2Call__Outputs {
  _call: NewVault2Call;

  constructor(call: NewVault2Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class NewExperimentalVaultCall extends ethereum.Call {
  get inputs(): NewExperimentalVaultCall__Inputs {
    return new NewExperimentalVaultCall__Inputs(this);
  }

  get outputs(): NewExperimentalVaultCall__Outputs {
    return new NewExperimentalVaultCall__Outputs(this);
  }
}

export class NewExperimentalVaultCall__Inputs {
  _call: NewExperimentalVaultCall;

  constructor(call: NewExperimentalVaultCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class NewExperimentalVaultCall__Outputs {
  _call: NewExperimentalVaultCall;

  constructor(call: NewExperimentalVaultCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class NewExperimentalVault1Call extends ethereum.Call {
  get inputs(): NewExperimentalVault1Call__Inputs {
    return new NewExperimentalVault1Call__Inputs(this);
  }

  get outputs(): NewExperimentalVault1Call__Outputs {
    return new NewExperimentalVault1Call__Outputs(this);
  }
}

export class NewExperimentalVault1Call__Inputs {
  _call: NewExperimentalVault1Call;

  constructor(call: NewExperimentalVault1Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get aGovernance(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class NewExperimentalVault1Call__Outputs {
  _call: NewExperimentalVault1Call;

  constructor(call: NewExperimentalVault1Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class NewExperimentalVault2Call extends ethereum.Call {
  get inputs(): NewExperimentalVault2Call__Inputs {
    return new NewExperimentalVault2Call__Inputs(this);
  }

  get outputs(): NewExperimentalVault2Call__Outputs {
    return new NewExperimentalVault2Call__Outputs(this);
  }
}

export class NewExperimentalVault2Call__Inputs {
  _call: NewExperimentalVault2Call;

  constructor(call: NewExperimentalVault2Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get aGovernance(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get guardian(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class NewExperimentalVault2Call__Outputs {
  _call: NewExperimentalVault2Call;

  constructor(call: NewExperimentalVault2Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class NewExperimentalVault3Call extends ethereum.Call {
  get inputs(): NewExperimentalVault3Call__Inputs {
    return new NewExperimentalVault3Call__Inputs(this);
  }

  get outputs(): NewExperimentalVault3Call__Outputs {
    return new NewExperimentalVault3Call__Outputs(this);
  }
}

export class NewExperimentalVault3Call__Inputs {
  _call: NewExperimentalVault3Call;

  constructor(call: NewExperimentalVault3Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get aGovernance(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get guardian(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get nameOverride(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class NewExperimentalVault3Call__Outputs {
  _call: NewExperimentalVault3Call;

  constructor(call: NewExperimentalVault3Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class NewExperimentalVault4Call extends ethereum.Call {
  get inputs(): NewExperimentalVault4Call__Inputs {
    return new NewExperimentalVault4Call__Inputs(this);
  }

  get outputs(): NewExperimentalVault4Call__Outputs {
    return new NewExperimentalVault4Call__Outputs(this);
  }
}

export class NewExperimentalVault4Call__Inputs {
  _call: NewExperimentalVault4Call;

  constructor(call: NewExperimentalVault4Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get aGovernance(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get guardian(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get nameOverride(): string {
    return this._call.inputValues[3].value.toString();
  }

  get symbolOverride(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class NewExperimentalVault4Call__Outputs {
  _call: NewExperimentalVault4Call;

  constructor(call: NewExperimentalVault4Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class EndorseVaultCall extends ethereum.Call {
  get inputs(): EndorseVaultCall__Inputs {
    return new EndorseVaultCall__Inputs(this);
  }

  get outputs(): EndorseVaultCall__Outputs {
    return new EndorseVaultCall__Outputs(this);
  }
}

export class EndorseVaultCall__Inputs {
  _call: EndorseVaultCall;

  constructor(call: EndorseVaultCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EndorseVaultCall__Outputs {
  _call: EndorseVaultCall;

  constructor(call: EndorseVaultCall) {
    this._call = call;
  }
}
