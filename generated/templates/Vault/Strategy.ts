// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Harvested extends ethereum.Event {
  get params(): Harvested__Params {
    return new Harvested__Params(this);
  }
}

export class Harvested__Params {
  _event: Harvested;

  constructor(event: Harvested) {
    this._event = event;
  }

  get profit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get loss(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get debtPayment(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get debtOutstanding(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Strategy extends ethereum.SmartContract {
  static bind(address: Address): Strategy {
    return new Strategy("Strategy", address);
  }

  apiVersion(): string {
    let result = super.call("apiVersion", "apiVersion():(string)", []);

    return result[0].toString();
  }

  try_apiVersion(): ethereum.CallResult<string> {
    let result = super.tryCall("apiVersion", "apiVersion():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  delegatedAssets(): BigInt {
    let result = super.call(
      "delegatedAssets",
      "delegatedAssets():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_delegatedAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegatedAssets",
      "delegatedAssets():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  harvestTrigger(callCost: BigInt): boolean {
    let result = super.call(
      "harvestTrigger",
      "harvestTrigger(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(callCost)]
    );

    return result[0].toBoolean();
  }

  try_harvestTrigger(callCost: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "harvestTrigger",
      "harvestTrigger(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(callCost)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isActive(): boolean {
    let result = super.call("isActive", "isActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_isActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isActive", "isActive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keeper(): Address {
    let result = super.call("keeper", "keeper():(address)", []);

    return result[0].toAddress();
  }

  try_keeper(): ethereum.CallResult<Address> {
    let result = super.tryCall("keeper", "keeper():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tendTrigger(callCost: BigInt): boolean {
    let result = super.call("tendTrigger", "tendTrigger(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(callCost)
    ]);

    return result[0].toBoolean();
  }

  try_tendTrigger(callCost: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("tendTrigger", "tendTrigger(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(callCost)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vault(): Address {
    let result = super.call("vault", "vault():(address)", []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("vault", "vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class TendCall extends ethereum.Call {
  get inputs(): TendCall__Inputs {
    return new TendCall__Inputs(this);
  }

  get outputs(): TendCall__Outputs {
    return new TendCall__Outputs(this);
  }
}

export class TendCall__Inputs {
  _call: TendCall;

  constructor(call: TendCall) {
    this._call = call;
  }
}

export class TendCall__Outputs {
  _call: TendCall;

  constructor(call: TendCall) {
    this._call = call;
  }
}
